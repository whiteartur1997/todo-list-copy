[{"C:\\Study\\itIncubator\\todolist-copy\\src\\features\\Todolists\\todolists-reducer.ts":"1","C:\\Study\\itIncubator\\todolist-copy\\src\\features\\Login\\auth-reducer.ts":"2","C:\\Study\\itIncubator\\todolist-copy\\src\\features\\Login\\Login.tsx":"3","C:\\Study\\itIncubator\\todolist-copy\\src\\components\\ErrorSnackbar\\ErrorSnackbar.tsx":"4","C:\\Study\\itIncubator\\todolist-copy\\src\\app\\store.ts":"5","C:\\Study\\itIncubator\\todolist-copy\\src\\index.tsx":"6","C:\\Study\\itIncubator\\todolist-copy\\src\\features\\Todolists\\TodolistLists.tsx":"7","C:\\Study\\itIncubator\\todolist-copy\\src\\api\\todolists-api.ts":"8","C:\\Study\\itIncubator\\todolist-copy\\src\\app\\app-reducer.ts":"9","C:\\Study\\itIncubator\\todolist-copy\\src\\features\\Todolists\\tasks-reducer.ts":"10","C:\\Study\\itIncubator\\todolist-copy\\src\\app\\App.tsx":"11","C:\\Study\\itIncubator\\todolist-copy\\src\\components\\EditableSpan\\EditableSpan.tsx":"12","C:\\Study\\itIncubator\\todolist-copy\\src\\utils\\error-utils.ts":"13"},{"size":5301,"mtime":1615304195560,"results":"14","hashOfConfig":"15"},{"size":1751,"mtime":1615303848939,"results":"16","hashOfConfig":"15"},{"size":3480,"mtime":1614686546125,"results":"17","hashOfConfig":"15"},{"size":973,"mtime":1615303926583,"results":"18","hashOfConfig":"15"},{"size":1167,"mtime":1614681749704,"results":"19","hashOfConfig":"15"},{"size":783,"mtime":1614680341560,"results":"20","hashOfConfig":"15"},{"size":3832,"mtime":1614695686648,"results":"21","hashOfConfig":"15"},{"size":3187,"mtime":1614692429618,"results":"22","hashOfConfig":"15"},{"size":1609,"mtime":1615304370745,"results":"23","hashOfConfig":"15"},{"size":8442,"mtime":1615304085328,"results":"24","hashOfConfig":"15"},{"size":2671,"mtime":1614695687926,"results":"25","hashOfConfig":"15"},{"size":1019,"mtime":1614085497241,"results":"26","hashOfConfig":"15"},{"size":803,"mtime":1615304665703,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"xyj0i3",{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"32","messages":"33","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34","usedDeprecatedRules":"35"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"35"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Study\\itIncubator\\todolist-copy\\src\\features\\Todolists\\todolists-reducer.ts",[],"C:\\Study\\itIncubator\\todolist-copy\\src\\features\\Login\\auth-reducer.ts",[],"C:\\Study\\itIncubator\\todolist-copy\\src\\features\\Login\\Login.tsx",["58"],"import { Button, Checkbox, FormControl, FormControlLabel, FormGroup, FormLabel, Grid, TextField } from '@material-ui/core';\r\nimport { useFormik } from 'formik';\r\nimport React from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { Redirect } from 'react-router-dom';\r\nimport { AppRootStateType } from '../../app/store';\r\nimport { loginUser } from './auth-reducer';\r\n\r\ntype FormikErrorType = {\r\n    email?: string\r\n    password?: string\r\n    rememberMe?: boolean\r\n}\r\n\r\nexport const Login = () => {\r\n\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn);\r\n    const dispatch = useDispatch();\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: \"\",\r\n            password: \"\",\r\n            rememberMe: false\r\n        },\r\n        onSubmit: (values) => {\r\n            dispatch(loginUser(values));\r\n        },\r\n        validate: (values) => {\r\n\r\n            const errors: FormikErrorType = {};\r\n\r\n            if (!values.email) {\r\n                errors.email = \"Email is required!\";\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = \"Email is invalid!\";\r\n            }\r\n            if (!values.password) {\r\n                errors.password = \"Password is required\";\r\n            } else if (values.password.length < 3) {\r\n                errors.password = \"Password is too short!\"\r\n            }\r\n            return errors;\r\n        }\r\n    })\r\n\r\n    if (isLoggedIn) {\r\n        return <Redirect to=\"/\" />\r\n    }\r\n\r\n    return <Grid container justify=\"center\">\r\n        <Grid item xs={4}>\r\n            <form onSubmit={formik.handleSubmit}>\r\n                <FormControl>\r\n                    <FormLabel>\r\n                        <p>To log in get registered\r\n                     <a href={'https://social-network.samuraijs.com/'}\r\n                                target={'_blank'}>here\r\n                     </a>\r\n                        </p>\r\n                        <p>or use common test account credentials:</p>\r\n                        <p>Email: free@samuraijs.com</p>\r\n                        <p>Password: free</p>\r\n                    </FormLabel>\r\n                    <FormGroup>\r\n                        <TextField\r\n                            label=\"Email\"\r\n                            margin=\"normal\"\r\n                            {...formik.getFieldProps(\"email\")}\r\n                        />\r\n                        {(formik.errors.email && formik.touched.email) && <div style={{ color: \"red\" }}>{formik.errors.email}</div>}\r\n                        <TextField\r\n                            type=\"password\"\r\n                            label=\"Password\"\r\n                            margin=\"normal\"\r\n                            {...formik.getFieldProps(\"password\")}\r\n                        />\r\n                        {(formik.errors.password && formik.touched.password) && <div style={{ color: \"red\" }}>{formik.errors.password}</div>}\r\n                        <FormControlLabel\r\n                            label={'Remember me'}\r\n                            control={<Checkbox {...formik.getFieldProps(\"rememberMe\")} checked={formik.values.rememberMe} />}\r\n                        />\r\n                        <Button type={'submit'} variant={'contained'} color={'primary'}>Login</Button>\r\n                    </FormGroup>\r\n                </FormControl>\r\n            </form>\r\n        </Grid>\r\n    </Grid>\r\n}\r\n\r\n",["59","60"],"C:\\Study\\itIncubator\\todolist-copy\\src\\components\\ErrorSnackbar\\ErrorSnackbar.tsx",[],"C:\\Study\\itIncubator\\todolist-copy\\src\\app\\store.ts",[],["61","62"],"C:\\Study\\itIncubator\\todolist-copy\\src\\index.tsx",[],"C:\\Study\\itIncubator\\todolist-copy\\src\\features\\Todolists\\TodolistLists.tsx",["63","64","65","66","67","68","69","70"],"import { Grid, Paper } from '@material-ui/core';\r\nimport React, { useCallback, useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { Redirect } from 'react-router-dom';\r\nimport { TaskStatuses } from '../../api/todolists-api';\r\nimport { AppRootStateType } from '../../app/store';\r\nimport { AddItemForm } from '../../components/AddItemForm/AddItemForm';\r\nimport { addTaskTC, deleteTaskTC, TasksStateType, updateTaskTC } from './tasks-reducer';\r\nimport { Todolist } from './Todolist/Todolist';\r\nimport {\r\n    changeTodolistFilterAC,\r\n    changeTodolistTitleTC,\r\n    createTodolistTC,\r\n    deleteTodolistTC,\r\n    FilterValuesType,\r\n    getTodolistsTC,\r\n    TodolistDomainType\r\n} from './todolists-reducer';\r\n\r\ntype PropsType = {\r\n    demo?: boolean\r\n}\r\n\r\nexport const TodolistLists: React.FC<PropsType> = ({ demo = false }) => {\r\n\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn);\r\n    const todolists = useSelector<AppRootStateType, Array<TodolistDomainType>>(state => state.todolists);\r\n    const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks);\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        if (demo || !isLoggedIn) return;\r\n        dispatch(getTodolistsTC());\r\n    }, []);\r\n\r\n    const removeTask = useCallback(function (id: string, todolistId: string) {\r\n        dispatch(deleteTaskTC(todolistId, id));\r\n    }, []);\r\n\r\n    const addTask = useCallback(function (title: string, todolistId: string) {\r\n        dispatch(addTaskTC(todolistId, title));\r\n    }, []);\r\n\r\n    const changeStatus = useCallback(function (id: string, status: TaskStatuses, todolistId: string) {\r\n        dispatch(updateTaskTC(todolistId, id, { status: status }));\r\n    }, []);\r\n\r\n    const changeTaskTitle = useCallback(function (id: string, newTitle: string, todolistId: string) {\r\n        dispatch(updateTaskTC(todolistId, id, { title: newTitle }));\r\n    }, []);\r\n\r\n    const changeFilter = useCallback(function (value: FilterValuesType, todolistId: string) {\r\n        const action = changeTodolistFilterAC(todolistId, value);\r\n        dispatch(action);\r\n    }, []);\r\n\r\n    const removeTodolist = useCallback(function (id: string) {\r\n        dispatch(deleteTodolistTC(id));\r\n    }, []);\r\n\r\n    const changeTodolistTitle = useCallback(function (id: string, title: string) {\r\n        dispatch(changeTodolistTitleTC(id, title));\r\n    }, []);\r\n\r\n    const addTodolist = useCallback((title: string) => {\r\n        dispatch(createTodolistTC(title));\r\n    }, [dispatch]);\r\n\r\n\r\n    if (!isLoggedIn) {\r\n        return <Redirect to=\"/login\" />\r\n    }\r\n    return (\r\n        <>\r\n            <Grid container style={{ padding: \"20px\" }}>\r\n                <AddItemForm addItem={addTodolist} />\r\n            </Grid>\r\n            <Grid container spacing={3}>\r\n                {todolists.map(tl => {\r\n                    let allTodolistTasks = tasks[tl.id];\r\n\r\n                    return <Grid item key={tl.id}>\r\n                        <Paper style={{ padding: \"10px\" }}>\r\n                            <Todolist\r\n                                todolist={tl}\r\n                                tasks={allTodolistTasks}\r\n                                removeTask={removeTask}\r\n                                changeFilter={changeFilter}\r\n                                addTask={addTask}\r\n                                changeTaskStatus={changeStatus}\r\n                                removeTodolist={removeTodolist}\r\n                                changeTaskTitle={changeTaskTitle}\r\n                                changeTodolistTitle={changeTodolistTitle}\r\n                                demo={demo} />\r\n                        </Paper>\r\n                    </Grid>;\r\n                })}\r\n            </Grid>\r\n        </>\r\n    );\r\n};\r\n","C:\\Study\\itIncubator\\todolist-copy\\src\\api\\todolists-api.ts",[],"C:\\Study\\itIncubator\\todolist-copy\\src\\app\\app-reducer.ts",[],"C:\\Study\\itIncubator\\todolist-copy\\src\\features\\Todolists\\tasks-reducer.ts",[],"C:\\Study\\itIncubator\\todolist-copy\\src\\app\\App.tsx",[],"C:\\Study\\itIncubator\\todolist-copy\\src\\components\\EditableSpan\\EditableSpan.tsx",[],"C:\\Study\\itIncubator\\todolist-copy\\src\\utils\\error-utils.ts",[],{"ruleId":"71","severity":1,"message":"72","line":58,"column":33,"nodeType":"73","endLine":58,"endColumn":50},{"ruleId":"74","replacedBy":"75"},{"ruleId":"76","replacedBy":"77"},{"ruleId":"74","replacedBy":"78"},{"ruleId":"76","replacedBy":"79"},{"ruleId":"80","severity":1,"message":"81","line":34,"column":8,"nodeType":"82","endLine":34,"endColumn":10,"suggestions":"83"},{"ruleId":"80","severity":1,"message":"84","line":38,"column":8,"nodeType":"82","endLine":38,"endColumn":10,"suggestions":"85"},{"ruleId":"80","severity":1,"message":"84","line":42,"column":8,"nodeType":"82","endLine":42,"endColumn":10,"suggestions":"86"},{"ruleId":"80","severity":1,"message":"84","line":46,"column":8,"nodeType":"82","endLine":46,"endColumn":10,"suggestions":"87"},{"ruleId":"80","severity":1,"message":"84","line":50,"column":8,"nodeType":"82","endLine":50,"endColumn":10,"suggestions":"88"},{"ruleId":"80","severity":1,"message":"84","line":55,"column":8,"nodeType":"82","endLine":55,"endColumn":10,"suggestions":"89"},{"ruleId":"80","severity":1,"message":"84","line":59,"column":8,"nodeType":"82","endLine":59,"endColumn":10,"suggestions":"90"},{"ruleId":"80","severity":1,"message":"84","line":63,"column":8,"nodeType":"82","endLine":63,"endColumn":10,"suggestions":"91"},"react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","JSXAttribute","no-native-reassign",["92"],"no-negated-in-lhs",["93"],["92"],["93"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'demo', 'dispatch', and 'isLoggedIn'. Either include them or remove the dependency array.","ArrayExpression",["94"],"React Hook useCallback has a missing dependency: 'dispatch'. Either include it or remove the dependency array.",["95"],["96"],["97"],["98"],["99"],["100"],["101"],"no-global-assign","no-unsafe-negation",{"desc":"102","fix":"103"},{"desc":"104","fix":"105"},{"desc":"104","fix":"106"},{"desc":"104","fix":"107"},{"desc":"104","fix":"108"},{"desc":"104","fix":"109"},{"desc":"104","fix":"110"},{"desc":"104","fix":"111"},"Update the dependencies array to be: [demo, dispatch, isLoggedIn]",{"range":"112","text":"113"},"Update the dependencies array to be: [dispatch]",{"range":"114","text":"115"},{"range":"116","text":"115"},{"range":"117","text":"115"},{"range":"118","text":"115"},{"range":"119","text":"115"},{"range":"120","text":"115"},{"range":"121","text":"115"},[1306,1308],"[demo, dispatch, isLoggedIn]",[1450,1452],"[dispatch]",[1594,1596],[1782,1784],[1970,1972],[2174,2176],[2294,2296],[2446,2448]]