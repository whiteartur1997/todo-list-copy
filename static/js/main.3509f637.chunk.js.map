{"version":3,"sources":["api/todolists-api.ts","utils/error-utils.ts","features/Login/auth-reducer.ts","app/app-reducer.ts","components/ErrorSnackbar/ErrorSnackbar.tsx","features/Login/Login.tsx","components/AddItemForm/AddItemForm.tsx","features/Todolists/todolists-reducer.ts","features/Todolists/tasks-reducer.ts","components/EditableSpan/EditableSpan.tsx","features/Todolists/Todolist/Task/Task.tsx","features/Todolists/Todolist/Todolist.tsx","features/Todolists/TodolistLists.tsx","app/App.tsx","reportWebVitals.ts","app/store.ts","index.tsx"],"names":["TaskStatuses","TaskPriorities","instance","axios","create","baseURL","withCredentials","headers","todolistsAPI","get","title","post","id","delete","put","todolistId","taskId","taskTitile","model","authAPI","loginData","handleServerAppError","data","dispatch","messages","length","setAppErrorAC","setAppStatusAC","handleServerNetworkError","error","message","initialState","isLoggedIn","loginUserAC","type","status","isInitialized","setAppInitAC","isInit","Alert","props","elevation","variant","ErrorSnackbar","useSelector","state","app","useDispatch","handleClose","event","reason","Snackbar","open","autoHideDuration","onClose","severity","Login","auth","formik","useFormik","initialValues","email","password","rememberMe","onSubmit","values","a","res","resultCode","validate","errors","test","to","Grid","container","justify","item","xs","handleSubmit","FormControl","FormLabel","href","target","FormGroup","TextField","label","margin","getFieldProps","touched","style","color","FormControlLabel","control","Checkbox","checked","Button","AddItemForm","React","memo","addItem","disabled","useState","setTitle","setError","addItemHandler","trim","value","onChange","e","currentTarget","onKeyPress","charCode","helperText","IconButton","onClick","AddBox","changeTodolistEntityStatusAC","entityStatus","changeTaskEntityStatusAC","updateTaskTC","domainModel","getState","task","tasks","find","t","apiModel","deadline","description","priority","startDate","then","updateTaskAC","catch","err","finally","console","warn","EditableSpan","editMode","setEditMode","autoFocus","onBlur","onDoubleClick","Task","onClickHandler","useCallback","removeTask","onChangeHandler","newIsDoneValue","changeTaskStatus","Completed","New","onTitleChangeHandler","newValue","changeTaskTitle","className","Delete","Todolist","demo","useEffect","todolist","setTasksAC","items","addTask","changeTodolistTitle","onAllClickHandler","changeFilter","onActiveClickHandler","onCompletedClickHandler","tasksForTodolist","filter","removeTodolist","map","paddingTop","TodolistLists","todolists","removeTaskAC","deleteTaskTC","addTaskTC","changeStatus","newTitle","action","changeTodolistTitleAC","changeTodolistTitleTC","addTodolist","createTodolistTC","padding","spacing","tl","allTodolistTasks","Paper","App","isAppInitialized","appStatus","logoutHandler","AppBar","position","Toolbar","edge","aria-label","Menu","Typography","LinearProgress","Container","fixed","exact","path","render","from","top","textAlign","width","CircularProgress","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","rootReducer","combineReducers","stateCopy","forEach","todoListId","copyState","store","createStore","applyMiddleware","thunk","window","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3509f637.chunk.js","sourcesContent":["import axios from 'axios'\r\nimport { RequestStatusType } from '../app/app-reducer'\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': '12593e8b-a230-49da-8bc0-827e793858c7'\r\n    }\r\n})\r\n\r\n// types\r\nexport type TodolistType = {\r\n    id: string\r\n    title: string\r\n    addedDate: string\r\n    order: number\r\n}\r\nexport type ResponseType<D = {}> = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    data: D\r\n}\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n}\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    Hi = 2,\r\n    Urgently = 3,\r\n    Later = 4\r\n}\r\nexport type TaskType = {\r\n    description: string\r\n    title: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n    entityStatus: RequestStatusType\r\n}\r\nexport type UpdateTaskModelType = {\r\n    title: string\r\n    description: string\r\n    status: number\r\n    priority: number\r\n    startDate: string\r\n    deadline: string\r\n}\r\ntype GetTasksResponse = {\r\n    error: string | null\r\n    totalCount: number\r\n    items: TaskType[]\r\n}\r\n\r\nexport type LoginUserRequestType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n    captcha?: string\r\n}\r\n\r\nexport type AuthMe = {\r\n    id: number\r\n    email: string\r\n    login: string\r\n}\r\n\r\n// api\r\nexport const todolistsAPI = {\r\n    getTodolists() {\r\n        const promise = instance.get<TodolistType[]>('todo-lists');\r\n        return promise;\r\n    },\r\n    createTodolist(title: string) {\r\n        const promise = instance.post<ResponseType<{ item: TodolistType }>>('todo-lists', { title: title });\r\n        return promise;\r\n    },\r\n    deleteTodolist(id: string) {\r\n        const promise = instance.delete<ResponseType>(`todo-lists/${id}`);\r\n        return promise;\r\n    },\r\n    updateTodolist(id: string, title: string) {\r\n        const promise = instance.put<ResponseType>(`todo-lists/${id}`, { title: title });\r\n        return promise;\r\n    },\r\n    getTasks(todolistId: string) {\r\n        return instance.get<GetTasksResponse>(`todo-lists/${todolistId}/tasks`);\r\n    },\r\n    deleteTask(todolistId: string, taskId: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`);\r\n    },\r\n    createTask(todolistId: string, taskTitile: string) {\r\n        return instance.post<ResponseType<{ item: TaskType }>>(`todo-lists/${todolistId}/tasks`, { title: taskTitile });\r\n    },\r\n    updateTask(todolistId: string, taskId: string, model: UpdateTaskModelType) {\r\n        return instance.put<ResponseType<TaskType>>(`todo-lists/${todolistId}/tasks/${taskId}`, model);\r\n    }\r\n}\r\n\r\nexport const authAPI = {\r\n    login(loginData: LoginUserRequestType) {\r\n        return instance.post<ResponseType<{ userId?: number }>>(`auth/login`, loginData);\r\n    },\r\n    logout() {\r\n        return instance.delete<ResponseType<{}>>(`auth/login`)\r\n    },\r\n    me() {\r\n        return instance.get<ResponseType<AuthMe>>(`auth/me`)\r\n    }\r\n}\r\n","import { Dispatch } from \"redux\";\r\nimport { setAppErrorAC, setAppStatusAC } from \"../app/app-reducer\";\r\nimport { ResponseType } from \"./../api/todolists-api\";\r\n\r\nexport function handleServerAppError<D>(data: ResponseType<D>, dispatch: Dispatch<ActionsType>) {\r\n  if (data.messages.length) {\r\n    dispatch(setAppErrorAC(data.messages[0]));\r\n  } else {\r\n    dispatch(setAppErrorAC(\"Some error occured!\"))\r\n  }\r\n  dispatch(setAppStatusAC(\"failed\"));\r\n}\r\n\r\nexport function handleServerNetworkError(error: any, dispatch: Dispatch<ActionsType>) {\r\n  dispatch(setAppErrorAC(error.message ? error.message : \"Some error occured\"));\r\n  dispatch(setAppStatusAC(\"failed\"));\r\n}\r\n\r\ntype ActionsType = ReturnType<typeof setAppErrorAC> | ReturnType<typeof setAppStatusAC>;","import { Dispatch } from \"redux\";\r\nimport { authAPI, LoginUserRequestType } from \"../../api/todolists-api\";\r\nimport { setAppStatusAC } from \"../../app/app-reducer\";\r\nimport { handleServerAppError, handleServerNetworkError } from \"../../utils/error-utils\";\r\n\r\nconst initialState = {\r\n    isLoggedIn: false\r\n}\r\n\r\n\r\nexport const authReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'LOGIN/SET-IS-LOGIN':\r\n            return { ...state, isLoggedIn: action.isLoggedIn }\r\n        default:\r\n            return state;\r\n    }\r\n\r\n}\r\n\r\nexport const loginUser = (loginData: LoginUserRequestType) => async (dispatch: Dispatch) => {\r\n    try {\r\n        dispatch(setAppStatusAC(\"loading\"));\r\n        const res = await authAPI.login(loginData);\r\n        if (res.data.resultCode === 0) {\r\n            dispatch(loginUserAC(true));\r\n            dispatch(setAppStatusAC(\"succeeded\"));\r\n        } else {\r\n            handleServerAppError(res.data, dispatch);\r\n        }\r\n    } catch (err) {\r\n        handleServerNetworkError(err, dispatch);\r\n    }\r\n}\r\n\r\nexport const logoutUser = () => async (dispatch: Dispatch) => {\r\n    try {\r\n        dispatch(setAppStatusAC(\"loading\"));\r\n        const res = await authAPI.logout();\r\n        if (res.data.resultCode === 0) {\r\n            dispatch(loginUserAC(false));\r\n        } else {\r\n            handleServerAppError(res.data, dispatch);\r\n        }\r\n    } catch (err) {\r\n        handleServerNetworkError(err, dispatch);\r\n    } finally {\r\n        dispatch(setAppStatusAC(\"idle\"));\r\n    }\r\n}\r\n\r\nexport const loginUserAC = (isLoggedIn: boolean) => ({ type: 'LOGIN/SET-IS-LOGIN', isLoggedIn } as const)\r\n\r\n// types\r\ntype InitialStateType = typeof initialState;\r\ntype ActionsType = ReturnType<typeof loginUserAC>;","import { Dispatch } from \"redux\";\r\nimport { authAPI } from \"../api/todolists-api\";\r\nimport { loginUserAC } from \"../features/Login/auth-reducer\";\r\nimport { handleServerAppError, handleServerNetworkError } from \"../utils/error-utils\";\r\n\r\nconst initialState = {\r\n  status: 'idle' as RequestStatusType,\r\n  error: null as string | null,\r\n  isInitialized: false as boolean\r\n}\r\n\r\nexport const appReducer = (state: InitialAppReducerStateType = initialState, action: ActionsType): InitialAppReducerStateType => {\r\n  switch (action.type) {\r\n    case 'APP/SET-STATUS':\r\n      return { ...state, status: action.status };\r\n    case 'APP/SET-ERROR':\r\n      return { ...state, error: action.error };\r\n    case 'APP/SET-INIT':\r\n      return { ...state, isInitialized: action.isInit };\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\n// thunks\r\nexport const initializeApp = () => async (dispatch: Dispatch) => {\r\n  try {\r\n    const res = await authAPI.me();\r\n    if (res.data.resultCode === 0) {\r\n      dispatch(loginUserAC(true));\r\n    } else {\r\n      handleServerAppError(res.data, dispatch);\r\n    }\r\n  } catch (err) {\r\n    handleServerNetworkError(err, dispatch);\r\n  } finally {\r\n    dispatch(setAppInitAC(true));\r\n  }\r\n}\r\n\r\n\r\n// actions\r\nexport const setAppStatusAC = (status: RequestStatusType) => ({ type: 'APP/SET-STATUS', status } as const);\r\nexport const setAppErrorAC = (error: string | null) => ({ type: 'APP/SET-ERROR', error } as const);\r\nexport const setAppInitAC = (isInit: boolean) => ({ type: 'APP/SET-INIT', isInit } as const);\r\n\r\n// types\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed';\r\nexport type InitialAppReducerStateType = typeof initialState;\r\ntype ActionsType = ReturnType<typeof setAppStatusAC>\r\n  | ReturnType<typeof setAppErrorAC>\r\n  | ReturnType<typeof setAppInitAC>;","import Snackbar from '@material-ui/core/Snackbar';\r\nimport MuiAlert, { AlertProps } from '@material-ui/lab/Alert';\r\nimport React from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { setAppErrorAC } from '../../app/app-reducer';\r\nimport { AppRootStateType } from '../../app/store';\r\n\r\nfunction Alert(props: AlertProps) {\r\n  return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\r\n}\r\n\r\nexport function ErrorSnackbar() {\r\n\r\n  const error = useSelector<AppRootStateType, string | null>(state => state.app.error);\r\n  const dispatch = useDispatch();\r\n\r\n  const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n    if (reason === 'clickaway') {\r\n      return;\r\n    }\r\n\r\n    dispatch(setAppErrorAC(null));\r\n  };\r\n\r\n  return (\r\n    <Snackbar open={!!error} autoHideDuration={6000} onClose={handleClose}>\r\n      <Alert onClose={handleClose} severity=\"error\">\r\n        {error}\r\n      </Alert>\r\n    </Snackbar>\r\n  );\r\n}\r\n","import { Button, Checkbox, FormControl, FormControlLabel, FormGroup, FormLabel, Grid, TextField } from '@material-ui/core';\r\nimport { useFormik } from 'formik';\r\nimport React from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { Redirect } from 'react-router-dom';\r\nimport { AppRootStateType } from '../../app/store';\r\nimport { loginUser } from './auth-reducer';\r\n\r\ntype FormikErrorType = {\r\n    email?: string\r\n    password?: string\r\n    rememberMe?: boolean\r\n}\r\n\r\nexport const Login = () => {\r\n\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn);\r\n    const dispatch = useDispatch();\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: \"\",\r\n            password: \"\",\r\n            rememberMe: false\r\n        },\r\n        onSubmit: (values) => {\r\n            dispatch(loginUser(values));\r\n        },\r\n        validate: (values) => {\r\n\r\n            const errors: FormikErrorType = {};\r\n\r\n            if (!values.email) {\r\n                errors.email = \"Email is required!\";\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = \"Email is invalid!\";\r\n            }\r\n            if (!values.password) {\r\n                errors.password = \"Password is required\";\r\n            } else if (values.password.length < 3) {\r\n                errors.password = \"Password is too short!\"\r\n            }\r\n            return errors;\r\n        }\r\n    })\r\n\r\n    if (isLoggedIn) {\r\n        return <Redirect to=\"/\" />\r\n    }\r\n\r\n    return <Grid container justify=\"center\">\r\n        <Grid item xs={4}>\r\n            <form onSubmit={formik.handleSubmit}>\r\n                <FormControl>\r\n                    <FormLabel>\r\n                        <p>To log in get registered\r\n                     <a href={'https://social-network.samuraijs.com/'}\r\n                                target={'_blank'}>here\r\n                     </a>\r\n                        </p>\r\n                        <p>or use common test account credentials:</p>\r\n                        <p>Email: free@samuraijs.com</p>\r\n                        <p>Password: free</p>\r\n                    </FormLabel>\r\n                    <FormGroup>\r\n                        <TextField\r\n                            label=\"Email\"\r\n                            margin=\"normal\"\r\n                            {...formik.getFieldProps(\"email\")}\r\n                        />\r\n                        {(formik.errors.email && formik.touched.email) && <div style={{ color: \"red\" }}>{formik.errors.email}</div>}\r\n                        <TextField\r\n                            type=\"password\"\r\n                            label=\"Password\"\r\n                            margin=\"normal\"\r\n                            {...formik.getFieldProps(\"password\")}\r\n                        />\r\n                        {(formik.errors.password && formik.touched.password) && <div style={{ color: \"red\" }}>{formik.errors.password}</div>}\r\n                        <FormControlLabel\r\n                            label={'Remember me'}\r\n                            control={<Checkbox {...formik.getFieldProps(\"rememberMe\")} checked={formik.values.rememberMe} />}\r\n                        />\r\n                        <Button type={'submit'} variant={'contained'} color={'primary'}>Login</Button>\r\n                    </FormGroup>\r\n                </FormControl>\r\n            </form>\r\n        </Grid>\r\n    </Grid>\r\n}\r\n\r\n","import { IconButton, TextField } from '@material-ui/core';\r\nimport { AddBox } from '@material-ui/icons';\r\nimport React, { ChangeEvent, KeyboardEvent, useState } from 'react';\r\n\r\nexport type AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n    disabled?: boolean\r\n}\r\n\r\nexport const AddItemForm = React.memo(function ({ addItem, disabled = false }: AddItemFormPropsType) {\r\n    let [title, setTitle] = useState(\"\")\r\n    let [error, setError] = useState<string | null>(null)\r\n\r\n    const addItemHandler = () => {\r\n        if (title.trim() !== \"\") {\r\n            addItem(title);\r\n            setTitle(\"\");\r\n        } else {\r\n            setError(\"Title is required\");\r\n        }\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error !== null) {\r\n            setError(null);\r\n        }\r\n        if (e.charCode === 13) {\r\n            addItemHandler();\r\n        }\r\n    }\r\n\r\n    return <div>\r\n        <TextField variant=\"outlined\"\r\n            error={!!error}\r\n            value={title}\r\n            onChange={onChangeHandler}\r\n            onKeyPress={onKeyPressHandler}\r\n            label=\"Title\"\r\n            helperText={error}\r\n            disabled={disabled}\r\n        />\r\n        <IconButton color=\"primary\" onClick={addItemHandler} disabled={disabled}>\r\n            <AddBox />\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import { Dispatch } from 'redux';\r\nimport { todolistsAPI, TodolistType } from '../../api/todolists-api';\r\nimport { RequestStatusType, setAppErrorAC, setAppStatusAC } from '../../app/app-reducer';\r\nimport { handleServerAppError, handleServerNetworkError } from '../../utils/error-utils';\r\n\r\n// types\r\ntype ActionsType = ReturnType<typeof removeTodolistAC>\r\n    | ReturnType<typeof addTodolistAC>\r\n    | ReturnType<typeof changeTodolistFilterAC>\r\n    | ReturnType<typeof changeTodolistTitleAC>\r\n    | ReturnType<typeof setTodolistsAC>\r\n    | ReturnType<typeof setAppStatusAC>\r\n    | ReturnType<typeof setAppErrorAC>\r\n    | ReturnType<typeof changeTodolistEntityStatusAC>;\r\nexport type FilterValuesType = \"all\" | \"active\" | \"completed\";\r\nexport type TodolistDomainType = TodolistType & {\r\n    filter: FilterValuesType,\r\n    entityStatus: RequestStatusType\r\n}\r\n\r\nconst initialState: Array<TodolistDomainType> = [\r\n    /*{id: todolistId1, title: 'What to learn', filter: 'all', addedDate: '', order: 0},\r\n    {id: todolistId2, title: 'What to buy', filter: 'all', addedDate: '', order: 0}*/\r\n]\r\n\r\nexport const todolistsReducer = (state: Array<TodolistDomainType> = initialState, action: ActionsType): Array<TodolistDomainType> => {\r\n    switch (action.type) {\r\n        case 'SET-TODOLISTS': return action.todolists.map((tl) => ({ ...tl, filter: \"all\", entityStatus: \"idle\" }))\r\n        case 'REMOVE-TODOLIST': return state.filter(tl => tl.id !== action.id)\r\n        case 'ADD-TODOLIST': return [{ ...action.todolist, filter: \"all\", entityStatus: \"idle\" }, ...state]\r\n        case 'CHANGE-TODOLIST-TITLE': return state.map((tl) => action.id === tl.id ? { ...tl, title: action.title } : tl)\r\n        case 'CHANGE-TODOLIST-FILTER': return state.map((tl) => action.id === tl.id ? { ...tl, filter: action.filter } : tl)\r\n        case 'CHANGE-TODOLIST-ENTITY-STATUS': return state.map((tl) => action.id === tl.id ? { ...tl, entityStatus: action.entityStatus } : tl)\r\n        default: return state;\r\n    }\r\n}\r\n\r\n// actions\r\nexport const removeTodolistAC = (id: string) => ({ type: 'REMOVE-TODOLIST', id } as const)\r\nexport const addTodolistAC = (todolist: TodolistType) => ({ type: 'ADD-TODOLIST', todolist } as const)\r\nexport const changeTodolistTitleAC = (id: string, title: string) => ({\r\n    type: 'CHANGE-TODOLIST-TITLE',\r\n    id,\r\n    title\r\n} as const)\r\nexport const changeTodolistFilterAC = (id: string, filter: FilterValuesType) => ({\r\n    type: 'CHANGE-TODOLIST-FILTER',\r\n    id,\r\n    filter\r\n} as const)\r\nexport const changeTodolistEntityStatusAC = (id: string, entityStatus: RequestStatusType) => ({\r\n    type: 'CHANGE-TODOLIST-ENTITY-STATUS',\r\n    id,\r\n    entityStatus\r\n} as const)\r\nexport const setTodolistsAC = (todolists: TodolistType[]) => ({ type: 'SET-TODOLISTS', todolists } as const);\r\n\r\n// thunks\r\nexport const getTodolistsTC = () => (dispatch: Dispatch<ActionsType>) => {\r\n    dispatch(setAppStatusAC(\"loading\"));\r\n    todolistsAPI.getTodolists()\r\n        .then(res => {\r\n            dispatch(setTodolistsAC(res.data));\r\n            dispatch(setAppStatusAC(\"succeeded\"));\r\n        })\r\n        .catch((err) => {\r\n            handleServerNetworkError(err, dispatch);\r\n        })\r\n}\r\nexport const deleteTodolistTC = (todolistId: string) => (dispatch: Dispatch<ActionsType>) => {\r\n    dispatch(setAppStatusAC(\"loading\"));\r\n    dispatch(changeTodolistEntityStatusAC(todolistId, \"loading\"));\r\n    todolistsAPI.deleteTodolist(todolistId)\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(removeTodolistAC(todolistId));\r\n                dispatch(setAppStatusAC(\"succeeded\"));\r\n            } else {\r\n                handleServerAppError(res.data, dispatch);\r\n            }\r\n        })\r\n        .catch(err => {\r\n            handleServerNetworkError(err, dispatch);\r\n        })\r\n        .finally(() => {\r\n            dispatch(changeTodolistEntityStatusAC(todolistId, \"idle\"));\r\n        })\r\n}\r\nexport const createTodolistTC = (title: string) => (dispatch: Dispatch<ActionsType>) => {\r\n    dispatch(setAppStatusAC(\"loading\"));\r\n    todolistsAPI.createTodolist(title)\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(addTodolistAC(res.data.data.item));\r\n                dispatch(setAppStatusAC(\"succeeded\"));\r\n            } else {\r\n                handleServerAppError(res.data, dispatch);\r\n            }\r\n        })\r\n        .catch(err => {\r\n            handleServerNetworkError(err, dispatch);\r\n        })\r\n}\r\nexport const changeTodolistTitleTC = (todolistId: string, title: string) => (dispatch: Dispatch<ActionsType>) => {\r\n    dispatch(setAppStatusAC(\"loading\"));\r\n    dispatch(changeTodolistEntityStatusAC(todolistId, \"loading\"));\r\n    todolistsAPI.updateTodolist(todolistId, title)\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(changeTodolistTitleAC(todolistId, title));\r\n            } else {\r\n                handleServerAppError(res.data, dispatch);\r\n            }\r\n        })\r\n        .catch(err => {\r\n            handleServerNetworkError(err, dispatch);\r\n        })\r\n        .finally(() => {\r\n            dispatch(changeTodolistEntityStatusAC(todolistId, \"idle\"));\r\n        })\r\n}","import { Dispatch } from 'redux';\r\nimport { TaskType, todolistsAPI, UpdateTaskModelType } from '../../api/todolists-api';\r\nimport { RequestStatusType, setAppErrorAC, setAppStatusAC } from '../../app/app-reducer';\r\nimport { AppRootStateType } from '../../app/store';\r\nimport { handleServerAppError, handleServerNetworkError } from '../../utils/error-utils';\r\nimport { addTodolistAC, changeTodolistEntityStatusAC, removeTodolistAC, setTodolistsAC } from './todolists-reducer';\r\n\r\n// types\r\ntype ActionsType = ReturnType<typeof removeTaskAC>\r\n    | ReturnType<typeof addTaskAC>\r\n    | ReturnType<typeof updateTaskAC>\r\n    | ReturnType<typeof addTodolistAC>\r\n    | ReturnType<typeof removeTodolistAC>\r\n    | ReturnType<typeof setTodolistsAC>\r\n    | ReturnType<typeof setTasksAC>\r\n    | ReturnType<typeof setAppStatusAC>\r\n    | ReturnType<typeof setAppErrorAC>\r\n    | ReturnType<typeof changeTodolistEntityStatusAC>\r\n    | ReturnType<typeof changeTaskEntityStatusAC>;\r\ntype UpdateDomainTaskModelType = {\r\n    title?: string\r\n    description?: string\r\n    status?: number\r\n    priority?: number\r\n    startDate?: string\r\n    deadline?: string\r\n}\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\n\r\nconst initialState: TasksStateType = {\r\n    /*\"todolistId1\": [\r\n        { id: \"1\", title: \"CSS\", status: TaskStatuses.New, todoListId: \"todolistId1\", description: '',\r\n            startDate: '', deadline: '', addedDate: '', order: 0, priority: TaskPriorities.Low },\r\n        { id: \"2\", title: \"JS\", status: TaskStatuses.Completed, todoListId: \"todolistId1\", description: '',\r\n            startDate: '', deadline: '', addedDate: '', order: 0, priority: TaskPriorities.Low },\r\n        { id: \"3\", title: \"React\", status: TaskStatuses.New, todoListId: \"todolistId1\", description: '',\r\n            startDate: '', deadline: '', addedDate: '', order: 0, priority: TaskPriorities.Low }\r\n    ],\r\n    \"todolistId2\": [\r\n        { id: \"1\", title: \"bread\", status: TaskStatuses.New, todoListId: \"todolistId2\", description: '',\r\n            startDate: '', deadline: '', addedDate: '', order: 0, priority: TaskPriorities.Low },\r\n        { id: \"2\", title: \"milk\", status: TaskStatuses.Completed, todoListId: \"todolistId2\", description: '',\r\n            startDate: '', deadline: '', addedDate: '', order: 0, priority: TaskPriorities.Low },\r\n        { id: \"3\", title: \"tea\", status: TaskStatuses.New, todoListId: \"todolistId2\", description: '',\r\n            startDate: '', deadline: '', addedDate: '', order: 0, priority: TaskPriorities.Low }\r\n    ]*/\r\n\r\n}\r\n\r\nexport const tasksReducer = (state: TasksStateType = initialState, action: ActionsType): TasksStateType => {\r\n    switch (action.type) {\r\n        case 'SET-TODOLISTS': {\r\n            const stateCopy = { ...state };\r\n            action.todolists.forEach(tl => {\r\n                stateCopy[tl.id] = []\r\n            })\r\n            return stateCopy;\r\n        }\r\n        case 'SET-TASKS': return { ...state, [action.todolistId]: action.tasks.map(t => ({ ...t, entityStatus: \"idle\" })) }\r\n        case 'REMOVE-TASK':\r\n            return { ...state, [action.todolistId]: state[action.todolistId].filter(t => t.id !== action.taskId) }\r\n        case 'ADD-TASK':\r\n            return { ...state, [action.task.todoListId]: [{ ...action.task, entityStatus: \"idle\" }, ...state[action.task.todoListId]] }\r\n        case 'UPDATE-TASK':\r\n            return { ...state, [action.todolistId]: state[action.todolistId].map(t => t.id === action.taskId ? { ...t, ...action.model } : t) }\r\n        case 'CHANGE-TASK-ENTITY-STATUS':\r\n            return { ...state, [action.todolistId]: state[action.todolistId].map(t => t.id === action.taskId ? { ...t, entityStatus: action.status } : t) }\r\n        case 'ADD-TODOLIST':\r\n            return { ...state, [action.todolist.id]: [] }\r\n        case 'REMOVE-TODOLIST': {\r\n            const copyState = { ...state };\r\n            delete copyState[action.id];\r\n            return copyState;\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n// actions\r\nexport const removeTaskAC = (taskId: string, todolistId: string) => ({\r\n    type: 'REMOVE-TASK',\r\n    taskId: taskId,\r\n    todolistId: todolistId\r\n} as const)\r\nexport const addTaskAC = (task: TaskType) => ({ type: 'ADD-TASK', task } as const)\r\nexport const updateTaskAC = (taskId: string, model: UpdateDomainTaskModelType, todolistId: string) => ({\r\n    type: 'UPDATE-TASK',\r\n    model,\r\n    todolistId,\r\n    taskId\r\n} as const)\r\nexport const setTasksAC = (todolistId: string, tasks: TaskType[]) => ({ type: 'SET-TASKS', todolistId, tasks } as const);\r\nexport const changeTaskEntityStatusAC = (taskId: string, status: RequestStatusType, todolistId: string) => {\r\n    return {\r\n        type: 'CHANGE-TASK-ENTITY-STATUS',\r\n        status,\r\n        todolistId,\r\n        taskId\r\n    } as const;\r\n}\r\n\r\n// thunks\r\nexport const getTasksTC = (todolistId: string) => (dispatch: Dispatch<ActionsType>) => {\r\n    dispatch(setAppStatusAC(\"loading\"));\r\n    dispatch(changeTodolistEntityStatusAC(todolistId, \"loading\"));\r\n    todolistsAPI.getTasks(todolistId)\r\n        .then(res => {\r\n            dispatch(setTasksAC(todolistId, res.data.items));\r\n            dispatch(setAppStatusAC(\"succeeded\"));\r\n        })\r\n        .catch((err) => {\r\n            handleServerNetworkError(err, dispatch);\r\n        })\r\n        .finally(() => {\r\n            dispatch(changeTodolistEntityStatusAC(todolistId, \"idle\"));\r\n        })\r\n}\r\nexport const addTaskTC = (todolistId: string, title: string) => (dispatch: Dispatch<ActionsType>) => {\r\n    dispatch(setAppStatusAC(\"loading\"));\r\n    todolistsAPI.createTask(todolistId, title)\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(addTaskAC(res.data.data.item));\r\n                dispatch(setAppStatusAC(\"succeeded\"))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch);\r\n            }\r\n        })\r\n        .catch(err => {\r\n            handleServerNetworkError(err, dispatch);\r\n        })\r\n}\r\nexport const deleteTaskTC = (todolistId: string, taskId: string) => (dispatch: Dispatch<ActionsType>) => {\r\n    dispatch(setAppStatusAC(\"loading\"));\r\n    dispatch(changeTaskEntityStatusAC(taskId, \"loading\", todolistId));\r\n    todolistsAPI.deleteTask(todolistId, taskId)\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(removeTaskAC(taskId, todolistId));\r\n                dispatch(setAppStatusAC(\"succeeded\"));\r\n            } else {\r\n                handleServerAppError(res.data, dispatch);\r\n            }\r\n        })\r\n        .catch(err => {\r\n            handleServerNetworkError(err, dispatch);\r\n        })\r\n}\r\nexport const updateTaskTC =\r\n    (todolistId: string, taskId: string, domainModel: UpdateDomainTaskModelType) =>\r\n        (dispatch: Dispatch<ActionsType>, getState: () => AppRootStateType) => {\r\n            const task = getState().tasks[todolistId].find(t => t.id === taskId);\r\n\r\n            if (!task) {\r\n                console.warn(\"No such task\");\r\n                return\r\n            }\r\n\r\n            const apiModel: UpdateTaskModelType = {\r\n                title: task.title,\r\n                deadline: task.deadline,\r\n                description: task.description,\r\n                priority: task.priority,\r\n                startDate: task.startDate,\r\n                status: task.status,\r\n                ...domainModel\r\n            }\r\n            dispatch(setAppStatusAC(\"loading\"));\r\n            dispatch(changeTaskEntityStatusAC(taskId, \"loading\", todolistId));\r\n            todolistsAPI.updateTask(todolistId, taskId, apiModel)\r\n                .then(res => {\r\n                    if (res.data.resultCode === 0) {\r\n                        dispatch(updateTaskAC(taskId, domainModel, todolistId));\r\n                        dispatch(setAppStatusAC(\"succeeded\"));\r\n                        dispatch(changeTaskEntityStatusAC(taskId, \"succeeded\", todolistId));\r\n                    } else {\r\n                        handleServerAppError(res.data, dispatch);\r\n                    }\r\n                })\r\n                .catch(err => {\r\n                    handleServerNetworkError(err, dispatch);\r\n                })\r\n                .finally(() => {\r\n                    dispatch(changeTaskEntityStatusAC(taskId, \"idle\", todolistId));\r\n                })\r\n        }\r\n","import { TextField } from '@material-ui/core';\r\nimport React, { ChangeEvent, useState } from 'react';\r\n\r\nexport type EditableSpanPropsType = {\r\n    value: string\r\n    onChange: (newValue: string) => void\r\n    disabled?: boolean\r\n}\r\n\r\nexport const EditableSpan = React.memo(function ({ disabled = false, ...props }: EditableSpanPropsType) {\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [title, setTitle] = useState(props.value);\r\n\r\n    const activateEditMode = () => {\r\n        if (disabled) return;\r\n        setEditMode(true);\r\n        setTitle(props.value);\r\n    }\r\n    const activateViewMode = () => {\r\n        setEditMode(false);\r\n        props.onChange(title);\r\n    }\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    return editMode\r\n        ? <TextField disabled={disabled} value={title} onChange={changeTitle} autoFocus onBlur={activateViewMode} />\r\n        : <span onDoubleClick={activateEditMode}>{props.value}</span>\r\n});\r\n","import { Checkbox, IconButton } from '@material-ui/core'\r\nimport { Delete } from '@material-ui/icons'\r\nimport React, { ChangeEvent, useCallback } from 'react'\r\nimport { TaskStatuses, TaskType } from '../../../../api/todolists-api'\r\nimport { EditableSpan } from '../../../../components/EditableSpan/EditableSpan'\r\n\r\nexport type TaskPropsType = {\r\n    task: TaskType\r\n    todolistId: string\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n}\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n    const onClickHandler = useCallback(() => props.removeTask(props.task.id, props.todolistId), [props.task.id, props.todolistId]);\r\n\r\n    const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        let newIsDoneValue = e.currentTarget.checked\r\n        props.changeTaskStatus(props.task.id, newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.New, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    const onTitleChangeHandler = useCallback((newValue: string) => {\r\n        props.changeTaskTitle(props.task.id, newValue, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    return <div key={props.task.id} className={props.task.status === TaskStatuses.Completed ? 'is-done' : ''}>\r\n        <Checkbox\r\n            disabled={props.task.entityStatus === \"loading\"}\r\n            checked={props.task.status === TaskStatuses.Completed}\r\n            color=\"primary\"\r\n            onChange={onChangeHandler}\r\n        />\r\n\r\n        <EditableSpan disabled={props.task.entityStatus === \"loading\"} value={props.task.title} onChange={onTitleChangeHandler} />\r\n        <IconButton disabled={props.task.entityStatus === \"loading\"} onClick={onClickHandler}>\r\n            <Delete />\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import { Button, IconButton } from '@material-ui/core'\r\nimport { Delete } from '@material-ui/icons'\r\nimport React, { useCallback, useEffect } from 'react'\r\nimport { useDispatch } from 'react-redux'\r\nimport { TaskStatuses, TaskType } from '../../../api/todolists-api'\r\nimport { AddItemForm } from '../../../components/AddItemForm/AddItemForm'\r\nimport { EditableSpan } from '../../../components/EditableSpan/EditableSpan'\r\nimport { getTasksTC } from '../tasks-reducer'\r\nimport { FilterValuesType, TodolistDomainType } from '../todolists-reducer'\r\nimport { Task } from './Task/Task'\r\n\r\ntype PropsType = {\r\n    todolist: TodolistDomainType\r\n    tasks: Array<TaskType>\r\n    changeFilter: (value: FilterValuesType, todolistId: string) => void\r\n    addTask: (title: string, todolistId: string) => void\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    removeTodolist: (id: string) => void\r\n    changeTodolistTitle: (id: string, newTitle: string) => void\r\n    demo?: boolean\r\n}\r\n\r\nexport const Todolist = React.memo(function ({ demo = false, ...props }: PropsType) {\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        if (demo) return\r\n        dispatch(getTasksTC(props.todolist.id))\r\n    }, [])\r\n\r\n    const addTask = useCallback((title: string) => {\r\n        props.addTask(title, props.todolist.id)\r\n    }, [props.addTask, props.todolist.id])\r\n\r\n    const removeTodolist = () => {\r\n        props.removeTodolist(props.todolist.id)\r\n    }\r\n    const changeTodolistTitle = useCallback((title: string) => {\r\n        props.changeTodolistTitle(props.todolist.id, title)\r\n    }, [props.todolist.id, props.changeTodolistTitle])\r\n\r\n    const onAllClickHandler = useCallback(() => props.changeFilter('all', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n    const onActiveClickHandler = useCallback(() => props.changeFilter('active', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n    const onCompletedClickHandler = useCallback(() => props.changeFilter('completed', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n\r\n\r\n    let tasksForTodolist = props.tasks;\r\n\r\n    if (props.todolist.filter === 'active') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.New)\r\n    }\r\n    if (props.todolist.filter === 'completed') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.Completed)\r\n    }\r\n\r\n    return <div>\r\n        <h3><EditableSpan disabled={props.todolist.entityStatus === \"loading\"} value={props.todolist.title} onChange={changeTodolistTitle} />\r\n            <IconButton onClick={removeTodolist} disabled={props.todolist.entityStatus === \"loading\"}>\r\n                <Delete />\r\n            </IconButton>\r\n        </h3>\r\n        <AddItemForm addItem={addTask} disabled={props.todolist.entityStatus === \"loading\"} />\r\n        <div>\r\n            {\r\n                tasksForTodolist.map(t => <Task key={t.id} task={t} todolistId={props.todolist.id}\r\n                    removeTask={props.removeTask}\r\n                    changeTaskTitle={props.changeTaskTitle}\r\n                    changeTaskStatus={props.changeTaskStatus}\r\n                />)\r\n            }\r\n        </div>\r\n        <div style={{ paddingTop: '10px' }}>\r\n            <Button variant={props.todolist.filter === 'all' ? 'outlined' : 'text'}\r\n                onClick={onAllClickHandler}\r\n                color={'default'}\r\n            >All\r\n            </Button>\r\n            <Button variant={props.todolist.filter === 'active' ? 'outlined' : 'text'}\r\n                onClick={onActiveClickHandler}\r\n                color={'primary'}>Active\r\n            </Button>\r\n            <Button variant={props.todolist.filter === 'completed' ? 'outlined' : 'text'}\r\n                onClick={onCompletedClickHandler}\r\n                color={'secondary'}>Completed\r\n            </Button>\r\n        </div>\r\n    </div>\r\n})\r\n\r\n\r\n","import { Grid, Paper } from '@material-ui/core';\r\nimport React, { useCallback, useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { Redirect } from 'react-router-dom';\r\nimport { TaskStatuses } from '../../api/todolists-api';\r\nimport { AppRootStateType } from '../../app/store';\r\nimport { AddItemForm } from '../../components/AddItemForm/AddItemForm';\r\nimport { addTaskTC, deleteTaskTC, TasksStateType, updateTaskTC } from './tasks-reducer';\r\nimport { Todolist } from './Todolist/Todolist';\r\nimport {\r\n    changeTodolistFilterAC,\r\n    changeTodolistTitleTC,\r\n    createTodolistTC,\r\n    deleteTodolistTC,\r\n    FilterValuesType,\r\n    getTodolistsTC,\r\n    TodolistDomainType\r\n} from './todolists-reducer';\r\n\r\ntype PropsType = {\r\n    demo?: boolean\r\n}\r\n\r\nexport const TodolistLists: React.FC<PropsType> = ({ demo = false }) => {\r\n\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn);\r\n    const todolists = useSelector<AppRootStateType, Array<TodolistDomainType>>(state => state.todolists);\r\n    const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks);\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        if (demo || !isLoggedIn) return;\r\n        dispatch(getTodolistsTC());\r\n    }, []);\r\n\r\n    const removeTask = useCallback(function (id: string, todolistId: string) {\r\n        dispatch(deleteTaskTC(todolistId, id));\r\n    }, []);\r\n\r\n    const addTask = useCallback(function (title: string, todolistId: string) {\r\n        dispatch(addTaskTC(todolistId, title));\r\n    }, []);\r\n\r\n    const changeStatus = useCallback(function (id: string, status: TaskStatuses, todolistId: string) {\r\n        dispatch(updateTaskTC(todolistId, id, { status: status }));\r\n    }, []);\r\n\r\n    const changeTaskTitle = useCallback(function (id: string, newTitle: string, todolistId: string) {\r\n        dispatch(updateTaskTC(todolistId, id, { title: newTitle }));\r\n    }, []);\r\n\r\n    const changeFilter = useCallback(function (value: FilterValuesType, todolistId: string) {\r\n        const action = changeTodolistFilterAC(todolistId, value);\r\n        dispatch(action);\r\n    }, []);\r\n\r\n    const removeTodolist = useCallback(function (id: string) {\r\n        dispatch(deleteTodolistTC(id));\r\n    }, []);\r\n\r\n    const changeTodolistTitle = useCallback(function (id: string, title: string) {\r\n        dispatch(changeTodolistTitleTC(id, title));\r\n    }, []);\r\n\r\n    const addTodolist = useCallback((title: string) => {\r\n        dispatch(createTodolistTC(title));\r\n    }, [dispatch]);\r\n\r\n\r\n    if (!isLoggedIn) {\r\n        return <Redirect to=\"/login\" />\r\n    }\r\n    return (\r\n        <>\r\n            <Grid container style={{ padding: \"20px\" }}>\r\n                <AddItemForm addItem={addTodolist} />\r\n            </Grid>\r\n            <Grid container spacing={3}>\r\n                {todolists.map(tl => {\r\n                    let allTodolistTasks = tasks[tl.id];\r\n\r\n                    return <Grid item key={tl.id}>\r\n                        <Paper style={{ padding: \"10px\" }}>\r\n                            <Todolist\r\n                                todolist={tl}\r\n                                tasks={allTodolistTasks}\r\n                                removeTask={removeTask}\r\n                                changeFilter={changeFilter}\r\n                                addTask={addTask}\r\n                                changeTaskStatus={changeStatus}\r\n                                removeTodolist={removeTodolist}\r\n                                changeTaskTitle={changeTaskTitle}\r\n                                changeTodolistTitle={changeTodolistTitle}\r\n                                demo={demo} />\r\n                        </Paper>\r\n                    </Grid>;\r\n                })}\r\n            </Grid>\r\n        </>\r\n    );\r\n};\r\n","import { AppBar, Button, CircularProgress, Container, IconButton, LinearProgress, Toolbar, Typography } from '@material-ui/core';\r\nimport { Menu } from '@material-ui/icons';\r\nimport React, { useCallback, useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { Redirect, Route, Switch } from 'react-router-dom';\r\nimport { ErrorSnackbar } from '../components/ErrorSnackbar/ErrorSnackbar';\r\nimport { logoutUser } from '../features/Login/auth-reducer';\r\nimport { Login } from '../features/Login/Login';\r\nimport { TodolistLists } from '../features/Todolists/TodolistLists';\r\nimport { initializeApp, RequestStatusType } from './app-reducer';\r\nimport './App.css';\r\nimport { AppRootStateType } from './store';\r\n\r\ntype PropsType = {\r\n    demo?: boolean\r\n}\r\n\r\nfunction App({ demo = false }: PropsType) {\r\n\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn);\r\n    const isAppInitialized = useSelector<AppRootStateType, boolean>(state => state.app.isInitialized);\r\n    const appStatus = useSelector<AppRootStateType, RequestStatusType>(state => state.app.status);\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        dispatch(initializeApp());\r\n    }, [dispatch]);\r\n\r\n    const logoutHandler = useCallback(() => {\r\n        dispatch(logoutUser());\r\n    }, [dispatch]);\r\n\r\n    if (!isAppInitialized) {\r\n        return <div\r\n            style={{ position: 'fixed', top: '30%', textAlign: 'center', width: '100%' }}>\r\n            <CircularProgress />\r\n        </div>\r\n\r\n    }\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <Menu />\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\">\r\n                        News\r\n                    </Typography>\r\n                    {isLoggedIn && <Button onClick={logoutHandler} color=\"inherit\">Log out</Button>}\r\n                </Toolbar>\r\n            </AppBar>\r\n            {appStatus === \"loading\" && <LinearProgress color=\"secondary\" />}\r\n            <Container fixed>\r\n                <Switch>\r\n                    <Route exact path=\"/\" render={() => <TodolistLists demo={demo} />} />\r\n                    <Route path=\"/login\" render={() => <Login />} />\r\n                    <Route path=\"/404error\" render={() => <h1>404 Error Occurred</h1>} />\r\n                    <Redirect from={\"*\"} to=\"/404error\" />\r\n                </Switch>\r\n            </Container>\r\n            <ErrorSnackbar />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { applyMiddleware, combineReducers, createStore } from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport { authReducer } from '../features/Login/auth-reducer';\r\nimport { tasksReducer } from '../features/Todolists/tasks-reducer';\r\nimport { todolistsReducer } from '../features/Todolists/todolists-reducer';\r\nimport { appReducer } from './app-reducer';\r\n\r\n// объединяя reducer-ы с помощью combineReducers,\r\n// мы задаём структуру нашего единственного объекта-состояния\r\nconst rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todolists: todolistsReducer,\r\n    app: appReducer,\r\n    auth: authReducer\r\n})\r\n// непосредственно создаём store\r\nexport const store = createStore(rootReducer, applyMiddleware(thunk));\r\n// определить автоматически тип всего объекта состояния\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n// а это, чтобы можно было в консоли браузера обращаться к store в любой момент\r\n// @ts-ignore\r\nwindow.store = store;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './app/App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport { Provider } from 'react-redux';\r\nimport { store } from './app/store';\r\nimport { BrowserRouter } from 'react-router-dom';\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <Provider store={store}>\r\n            <BrowserRouter>\r\n                <App />\r\n            </BrowserRouter>\r\n        </Provider>\r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}