{"version":3,"sources":["app/app-reducer.ts","components/ErrorSnackbar/ErrorSnackbar.tsx","api/todolists-api.ts","components/AddItemForm/AddItemForm.tsx","utils/error-utils.ts","features/Todolists/todolists-reducer.ts","features/Todolists/tasks-reducer.ts","components/EditableSpan/EditableSpan.tsx","features/Todolists/Todolist/Task/Task.tsx","features/Todolists/Todolist/Todolist.tsx","features/Todolists/TodolistLists.tsx","app/App.tsx","reportWebVitals.ts","app/store.ts","index.tsx"],"names":["initialState","status","error","setAppStatusAC","type","setAppErrorAC","Alert","props","elevation","variant","ErrorSnackbar","useSelector","state","app","dispatch","useDispatch","console","log","handleClose","event","reason","Snackbar","open","autoHideDuration","onClose","severity","TaskStatuses","TaskPriorities","AddItemForm","React","memo","addItem","disabled","useState","title","setTitle","setError","addItemHandler","trim","TextField","value","onChange","e","currentTarget","onKeyPress","charCode","label","helperText","IconButton","color","onClick","AddBox","instance","axios","create","baseURL","withCredentials","headers","todolistsAPI","get","post","id","delete","put","todolistId","taskId","taskTitile","model","handleServerAppError","data","messages","length","handleServerNetworkError","message","changeTodolistEntityStatusAC","entityStatus","changeTaskEntityStatusAC","updateTaskTC","domainModel","getState","task","tasks","find","t","apiModel","deadline","description","priority","startDate","then","res","resultCode","updateTaskAC","catch","err","finally","warn","EditableSpan","editMode","setEditMode","autoFocus","onBlur","onDoubleClick","Task","onClickHandler","useCallback","removeTask","onChangeHandler","newIsDoneValue","checked","changeTaskStatus","Completed","New","onTitleChangeHandler","newValue","changeTaskTitle","className","Checkbox","Delete","Todolist","demo","useEffect","todolist","setTasksAC","items","addTask","changeTodolistTitle","onAllClickHandler","changeFilter","onActiveClickHandler","onCompletedClickHandler","tasksForTodolist","filter","removeTodolist","map","style","paddingTop","Button","TodolistLists","todolists","removeTaskAC","deleteTaskTC","item","addTaskTC","changeStatus","newTitle","action","changeTodolistTitleAC","changeTodolistTitleTC","addTodolist","createTodolistTC","Grid","container","padding","spacing","tl","allTodolistTasks","Paper","App","appStatus","AppBar","position","Toolbar","edge","aria-label","Menu","Typography","LinearProgress","Container","fixed","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","rootReducer","combineReducers","stateCopy","forEach","todoListId","copyState","store","createStore","applyMiddleware","thunk","window","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ca0ef3b8.chunk.js","sourcesContent":["const initialState = {\r\n  status: 'idle' as RequestStatusType,\r\n  error: null as string | null\r\n}\r\n\r\nexport const appReducer = (state: InitialAppReducerStateType = initialState, action: ActionsType): InitialAppReducerStateType => {\r\n  switch (action.type) {\r\n    case 'APP/SET-STATUS':\r\n      return { ...state, status: action.status };\r\n    case 'APP/SET-ERROR':\r\n      return { ...state, error: action.error };\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\n// actions\r\nexport const setAppStatusAC = (status: RequestStatusType) => ({ type: 'APP/SET-STATUS', status } as const);\r\nexport const setAppErrorAC = (error: string | null) => ({ type: 'APP/SET-ERROR', error } as const);\r\n\r\n// types\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed';\r\nexport type InitialAppReducerStateType = typeof initialState;\r\ntype ActionsType = ReturnType<typeof setAppStatusAC> | ReturnType<typeof setAppErrorAC>;","import Snackbar from '@material-ui/core/Snackbar';\r\nimport MuiAlert, { AlertProps } from '@material-ui/lab/Alert';\r\nimport React from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { setAppErrorAC } from '../../app/app-reducer';\r\nimport { AppRootStateType } from '../../app/store';\r\n\r\nfunction Alert(props: AlertProps) {\r\n  return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\r\n}\r\n\r\nexport function ErrorSnackbar() {\r\n\r\n  const error = useSelector<AppRootStateType, string | null>(state => state.app.error);\r\n  const dispatch = useDispatch();\r\n  console.log(error);\r\n\r\n  const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n    if (reason === 'clickaway') {\r\n      return;\r\n    }\r\n\r\n    dispatch(setAppErrorAC(null));\r\n  };\r\n\r\n  return (\r\n    <Snackbar open={!!error} autoHideDuration={6000} onClose={handleClose}>\r\n      <Alert onClose={handleClose} severity=\"error\">\r\n        {error}\r\n      </Alert>\r\n    </Snackbar>\r\n  );\r\n}\r\n","import axios from 'axios'\r\nimport { RequestStatusType } from '../app/app-reducer'\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': '12593e8b-a230-49da-8bc0-827e793858c7'\r\n    }\r\n})\r\n\r\n// types\r\nexport type TodolistType = {\r\n    id: string\r\n    title: string\r\n    addedDate: string\r\n    order: number\r\n}\r\nexport type ResponseType<D = {}> = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    data: D\r\n}\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n}\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    Hi = 2,\r\n    Urgently = 3,\r\n    Later = 4\r\n}\r\nexport type TaskType = {\r\n    description: string\r\n    title: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n    entityStatus: RequestStatusType\r\n}\r\nexport type UpdateTaskModelType = {\r\n    title: string\r\n    description: string\r\n    status: number\r\n    priority: number\r\n    startDate: string\r\n    deadline: string\r\n}\r\ntype GetTasksResponse = {\r\n    error: string | null\r\n    totalCount: number\r\n    items: TaskType[]\r\n}\r\n\r\n// api\r\nexport const todolistsAPI = {\r\n    getTodolists() {\r\n        const promise = instance.get<TodolistType[]>('todo-lists');\r\n        return promise;\r\n    },\r\n    createTodolist(title: string) {\r\n        const promise = instance.post<ResponseType<{ item: TodolistType }>>('todo-lists', { title: title });\r\n        return promise;\r\n    },\r\n    deleteTodolist(id: string) {\r\n        const promise = instance.delete<ResponseType>(`todo-lists/${id}`);\r\n        return promise;\r\n    },\r\n    updateTodolist(id: string, title: string) {\r\n        const promise = instance.put<ResponseType>(`todo-lists/${id}`, { title: title });\r\n        return promise;\r\n    },\r\n    getTasks(todolistId: string) {\r\n        return instance.get<GetTasksResponse>(`todo-lists/${todolistId}/tasks`);\r\n    },\r\n    deleteTask(todolistId: string, taskId: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`);\r\n    },\r\n    createTask(todolistId: string, taskTitile: string) {\r\n        return instance.post<ResponseType<{ item: TaskType }>>(`todo-lists/${todolistId}/tasks`, { title: taskTitile });\r\n    },\r\n    updateTask(todolistId: string, taskId: string, model: UpdateTaskModelType) {\r\n        return instance.put<ResponseType<TaskType>>(`todo-lists/${todolistId}/tasks/${taskId}`, model);\r\n    }\r\n}\r\n","import { IconButton, TextField } from '@material-ui/core';\r\nimport { AddBox } from '@material-ui/icons';\r\nimport React, { ChangeEvent, KeyboardEvent, useState } from 'react';\r\n\r\nexport type AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n    disabled?: boolean\r\n}\r\n\r\nexport const AddItemForm = React.memo(function ({ addItem, disabled = false }: AddItemFormPropsType) {\r\n    let [title, setTitle] = useState(\"\")\r\n    let [error, setError] = useState<string | null>(null)\r\n\r\n    const addItemHandler = () => {\r\n        if (title.trim() !== \"\") {\r\n            addItem(title);\r\n            setTitle(\"\");\r\n        } else {\r\n            setError(\"Title is required\");\r\n        }\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error !== null) {\r\n            setError(null);\r\n        }\r\n        if (e.charCode === 13) {\r\n            addItemHandler();\r\n        }\r\n    }\r\n\r\n    return <div>\r\n        <TextField variant=\"outlined\"\r\n            error={!!error}\r\n            value={title}\r\n            onChange={onChangeHandler}\r\n            onKeyPress={onKeyPressHandler}\r\n            label=\"Title\"\r\n            helperText={error}\r\n            disabled={disabled}\r\n        />\r\n        <IconButton color=\"primary\" onClick={addItemHandler} disabled={disabled}>\r\n            <AddBox />\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import { Dispatch } from \"redux\";\r\nimport { setAppErrorAC, setAppStatusAC } from \"../app/app-reducer\";\r\nimport { ResponseType } from \"./../api/todolists-api\";\r\n\r\nexport function handleServerAppError<D>(data: ResponseType<D>, dispatch: Dispatch<ActionsType>) {\r\n  if (data.messages.length) {\r\n    dispatch(setAppErrorAC(data.messages[0]));\r\n  } else {\r\n    dispatch(setAppErrorAC(\"Some error occured!\"))\r\n  }\r\n  dispatch(setAppStatusAC(\"failed\"));\r\n}\r\n\r\nexport function handleServerNetworkError(error: any, dispatch: Dispatch<ActionsType>) {\r\n  dispatch(setAppErrorAC(error.message ? error.message : \"Some error occured\"));\r\n  dispatch(setAppStatusAC(\"failed\"));\r\n}\r\n\r\ntype ActionsType = ReturnType<typeof setAppErrorAC> | ReturnType<typeof setAppStatusAC>;","import { Dispatch } from 'redux';\r\nimport { todolistsAPI, TodolistType } from '../../api/todolists-api';\r\nimport { RequestStatusType, setAppErrorAC, setAppStatusAC } from '../../app/app-reducer';\r\nimport { handleServerAppError, handleServerNetworkError } from '../../utils/error-utils';\r\n\r\n// types\r\ntype ActionsType = ReturnType<typeof removeTodolistAC>\r\n    | ReturnType<typeof addTodolistAC>\r\n    | ReturnType<typeof changeTodolistFilterAC>\r\n    | ReturnType<typeof changeTodolistTitleAC>\r\n    | ReturnType<typeof setTodolistsAC>\r\n    | ReturnType<typeof setAppStatusAC>\r\n    | ReturnType<typeof setAppErrorAC>\r\n    | ReturnType<typeof changeTodolistEntityStatusAC>;\r\nexport type FilterValuesType = \"all\" | \"active\" | \"completed\";\r\nexport type TodolistDomainType = TodolistType & {\r\n    filter: FilterValuesType,\r\n    entityStatus: RequestStatusType\r\n}\r\n\r\nconst initialState: Array<TodolistDomainType> = [\r\n    /*{id: todolistId1, title: 'What to learn', filter: 'all', addedDate: '', order: 0},\r\n    {id: todolistId2, title: 'What to buy', filter: 'all', addedDate: '', order: 0}*/\r\n]\r\n\r\nexport const todolistsReducer = (state: Array<TodolistDomainType> = initialState, action: ActionsType): Array<TodolistDomainType> => {\r\n    switch (action.type) {\r\n        case 'SET-TODOLISTS': return action.todolists.map((tl) => ({ ...tl, filter: \"all\", entityStatus: \"idle\" }))\r\n        case 'REMOVE-TODOLIST': return state.filter(tl => tl.id !== action.id)\r\n        case 'ADD-TODOLIST': return [{ ...action.todolist, filter: \"all\", entityStatus: \"idle\" }, ...state]\r\n        case 'CHANGE-TODOLIST-TITLE': return state.map((tl) => action.id === tl.id ? { ...tl, title: action.title } : tl)\r\n        case 'CHANGE-TODOLIST-FILTER': return state.map((tl) => action.id === tl.id ? { ...tl, filter: action.filter } : tl)\r\n        case 'CHANGE-TODOLIST-ENTITY-STATUS': return state.map((tl) => action.id === tl.id ? { ...tl, entityStatus: action.entityStatus } : tl)\r\n        default: return state;\r\n    }\r\n}\r\n\r\n// actions\r\nexport const removeTodolistAC = (id: string) => ({ type: 'REMOVE-TODOLIST', id } as const)\r\nexport const addTodolistAC = (todolist: TodolistType) => ({ type: 'ADD-TODOLIST', todolist } as const)\r\nexport const changeTodolistTitleAC = (id: string, title: string) => ({\r\n    type: 'CHANGE-TODOLIST-TITLE',\r\n    id,\r\n    title\r\n} as const)\r\nexport const changeTodolistFilterAC = (id: string, filter: FilterValuesType) => ({\r\n    type: 'CHANGE-TODOLIST-FILTER',\r\n    id,\r\n    filter\r\n} as const)\r\nexport const changeTodolistEntityStatusAC = (id: string, entityStatus: RequestStatusType) => ({\r\n    type: 'CHANGE-TODOLIST-ENTITY-STATUS',\r\n    id,\r\n    entityStatus\r\n} as const)\r\nexport const setTodolistsAC = (todolists: TodolistType[]) => ({ type: 'SET-TODOLISTS', todolists } as const);\r\n\r\n// thunks\r\nexport const getTodolistsTC = () => (dispatch: Dispatch<ActionsType>) => {\r\n    dispatch(setAppStatusAC(\"loading\"));\r\n    todolistsAPI.getTodolists()\r\n        .then(res => {\r\n            dispatch(setTodolistsAC(res.data));\r\n            dispatch(setAppStatusAC(\"succeeded\"));\r\n        })\r\n        .catch((err) => {\r\n            handleServerNetworkError(err, dispatch);\r\n        })\r\n}\r\nexport const deleteTodolistTC = (todolistId: string) => (dispatch: Dispatch<ActionsType>) => {\r\n    dispatch(setAppStatusAC(\"loading\"));\r\n    dispatch(changeTodolistEntityStatusAC(todolistId, \"loading\"));\r\n    todolistsAPI.deleteTodolist(todolistId)\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(removeTodolistAC(todolistId));\r\n                dispatch(setAppStatusAC(\"succeeded\"));\r\n            } else {\r\n                handleServerAppError(res.data, dispatch);\r\n            }\r\n        })\r\n        .catch(err => {\r\n            handleServerNetworkError(err, dispatch);\r\n        })\r\n        .finally(() => {\r\n            dispatch(changeTodolistEntityStatusAC(todolistId, \"idle\"));\r\n        })\r\n}\r\nexport const createTodolistTC = (title: string) => (dispatch: Dispatch<ActionsType>) => {\r\n    dispatch(setAppStatusAC(\"loading\"));\r\n    todolistsAPI.createTodolist(title)\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(addTodolistAC(res.data.data.item));\r\n                dispatch(setAppStatusAC(\"succeeded\"));\r\n            } else {\r\n                handleServerAppError(res.data, dispatch);\r\n            }\r\n        })\r\n        .catch(err => {\r\n            handleServerNetworkError(err, dispatch);\r\n        })\r\n}\r\nexport const changeTodolistTitleTC = (todolistId: string, title: string) => (dispatch: Dispatch<ActionsType>) => {\r\n    dispatch(setAppStatusAC(\"loading\"));\r\n    dispatch(changeTodolistEntityStatusAC(todolistId, \"loading\"));\r\n    todolistsAPI.updateTodolist(todolistId, title)\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(changeTodolistTitleAC(todolistId, title));\r\n            } else {\r\n                handleServerAppError(res.data, dispatch);\r\n            }\r\n        })\r\n        .catch(err => {\r\n            handleServerNetworkError(err, dispatch);\r\n        })\r\n        .finally(() => {\r\n            dispatch(changeTodolistEntityStatusAC(todolistId, \"idle\"));\r\n        })\r\n}","import { Dispatch } from 'redux';\r\nimport { TaskType, todolistsAPI, UpdateTaskModelType } from '../../api/todolists-api';\r\nimport { RequestStatusType, setAppErrorAC, setAppStatusAC } from '../../app/app-reducer';\r\nimport { AppRootStateType } from '../../app/store';\r\nimport { handleServerAppError, handleServerNetworkError } from '../../utils/error-utils';\r\nimport { addTodolistAC, changeTodolistEntityStatusAC, removeTodolistAC, setTodolistsAC } from './todolists-reducer';\r\n\r\n// types\r\ntype ActionsType = ReturnType<typeof removeTaskAC>\r\n    | ReturnType<typeof addTaskAC>\r\n    | ReturnType<typeof updateTaskAC>\r\n    | ReturnType<typeof addTodolistAC>\r\n    | ReturnType<typeof removeTodolistAC>\r\n    | ReturnType<typeof setTodolistsAC>\r\n    | ReturnType<typeof setTasksAC>\r\n    | ReturnType<typeof setAppStatusAC>\r\n    | ReturnType<typeof setAppErrorAC>\r\n    | ReturnType<typeof changeTodolistEntityStatusAC>\r\n    | ReturnType<typeof changeTaskEntityStatusAC>;\r\ntype UpdateDomainTaskModelType = {\r\n    title?: string\r\n    description?: string\r\n    status?: number\r\n    priority?: number\r\n    startDate?: string\r\n    deadline?: string\r\n}\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\n\r\nconst initialState: TasksStateType = {\r\n    /*\"todolistId1\": [\r\n        { id: \"1\", title: \"CSS\", status: TaskStatuses.New, todoListId: \"todolistId1\", description: '',\r\n            startDate: '', deadline: '', addedDate: '', order: 0, priority: TaskPriorities.Low },\r\n        { id: \"2\", title: \"JS\", status: TaskStatuses.Completed, todoListId: \"todolistId1\", description: '',\r\n            startDate: '', deadline: '', addedDate: '', order: 0, priority: TaskPriorities.Low },\r\n        { id: \"3\", title: \"React\", status: TaskStatuses.New, todoListId: \"todolistId1\", description: '',\r\n            startDate: '', deadline: '', addedDate: '', order: 0, priority: TaskPriorities.Low }\r\n    ],\r\n    \"todolistId2\": [\r\n        { id: \"1\", title: \"bread\", status: TaskStatuses.New, todoListId: \"todolistId2\", description: '',\r\n            startDate: '', deadline: '', addedDate: '', order: 0, priority: TaskPriorities.Low },\r\n        { id: \"2\", title: \"milk\", status: TaskStatuses.Completed, todoListId: \"todolistId2\", description: '',\r\n            startDate: '', deadline: '', addedDate: '', order: 0, priority: TaskPriorities.Low },\r\n        { id: \"3\", title: \"tea\", status: TaskStatuses.New, todoListId: \"todolistId2\", description: '',\r\n            startDate: '', deadline: '', addedDate: '', order: 0, priority: TaskPriorities.Low }\r\n    ]*/\r\n\r\n}\r\n\r\nexport const tasksReducer = (state: TasksStateType = initialState, action: ActionsType): TasksStateType => {\r\n    switch (action.type) {\r\n        case 'SET-TODOLISTS': {\r\n            const stateCopy = { ...state };\r\n            action.todolists.forEach(tl => {\r\n                stateCopy[tl.id] = []\r\n            })\r\n            return stateCopy;\r\n        }\r\n        case 'SET-TASKS': return { ...state, [action.todolistId]: action.tasks.map(t => ({ ...t, entityStatus: \"idle\" })) }\r\n        case 'REMOVE-TASK':\r\n            return { ...state, [action.todolistId]: state[action.todolistId].filter(t => t.id !== action.taskId) }\r\n        case 'ADD-TASK':\r\n            return { ...state, [action.task.todoListId]: [{ ...action.task, entityStatus: \"idle\" }, ...state[action.task.todoListId]] }\r\n        case 'UPDATE-TASK':\r\n            return { ...state, [action.todolistId]: state[action.todolistId].map(t => t.id === action.taskId ? { ...t, ...action.model } : t) }\r\n        case 'CHANGE-TASK-ENTITY-STATUS':\r\n            return { ...state, [action.todolistId]: state[action.todolistId].map(t => t.id === action.taskId ? { ...t, entityStatus: action.status } : t) }\r\n        case 'ADD-TODOLIST':\r\n            return { ...state, [action.todolist.id]: [] }\r\n        case 'REMOVE-TODOLIST': {\r\n            const copyState = { ...state };\r\n            delete copyState[action.id];\r\n            return copyState;\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n// actions\r\nexport const removeTaskAC = (taskId: string, todolistId: string) => ({\r\n    type: 'REMOVE-TASK',\r\n    taskId: taskId,\r\n    todolistId: todolistId\r\n} as const)\r\nexport const addTaskAC = (task: TaskType) => ({ type: 'ADD-TASK', task } as const)\r\nexport const updateTaskAC = (taskId: string, model: UpdateDomainTaskModelType, todolistId: string) => ({\r\n    type: 'UPDATE-TASK',\r\n    model,\r\n    todolistId,\r\n    taskId\r\n} as const)\r\nexport const setTasksAC = (todolistId: string, tasks: TaskType[]) => ({ type: 'SET-TASKS', todolistId, tasks } as const);\r\nexport const changeTaskEntityStatusAC = (taskId: string, status: RequestStatusType, todolistId: string) => {\r\n    return {\r\n        type: 'CHANGE-TASK-ENTITY-STATUS',\r\n        status,\r\n        todolistId,\r\n        taskId\r\n    } as const;\r\n}\r\n\r\n// thunks\r\nexport const getTasksTC = (todolistId: string) => (dispatch: Dispatch<ActionsType>) => {\r\n    dispatch(setAppStatusAC(\"loading\"));\r\n    dispatch(changeTodolistEntityStatusAC(todolistId, \"loading\"));\r\n    todolistsAPI.getTasks(todolistId)\r\n        .then(res => {\r\n            dispatch(setTasksAC(todolistId, res.data.items));\r\n            dispatch(setAppStatusAC(\"succeeded\"));\r\n        })\r\n        .catch((err) => {\r\n            handleServerNetworkError(err, dispatch);\r\n        })\r\n        .finally(() => {\r\n            dispatch(changeTodolistEntityStatusAC(todolistId, \"idle\"));\r\n        })\r\n}\r\nexport const addTaskTC = (todolistId: string, title: string) => (dispatch: Dispatch<ActionsType>) => {\r\n    dispatch(setAppStatusAC(\"loading\"));\r\n    todolistsAPI.createTask(todolistId, title)\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(addTaskAC(res.data.data.item));\r\n                dispatch(setAppStatusAC(\"succeeded\"))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch);\r\n            }\r\n        })\r\n        .catch(err => {\r\n            handleServerNetworkError(err, dispatch);\r\n        })\r\n}\r\nexport const deleteTaskTC = (todolistId: string, taskId: string) => (dispatch: Dispatch<ActionsType>) => {\r\n    dispatch(setAppStatusAC(\"loading\"));\r\n    dispatch(changeTaskEntityStatusAC(taskId, \"loading\", todolistId));\r\n    todolistsAPI.deleteTask(todolistId, taskId)\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(removeTaskAC(taskId, todolistId));\r\n                dispatch(setAppStatusAC(\"succeeded\"));\r\n            } else {\r\n                handleServerAppError(res.data, dispatch);\r\n            }\r\n        })\r\n        .catch(err => {\r\n            handleServerNetworkError(err, dispatch);\r\n        })\r\n}\r\nexport const updateTaskTC =\r\n    (todolistId: string, taskId: string, domainModel: UpdateDomainTaskModelType) =>\r\n        (dispatch: Dispatch<ActionsType>, getState: () => AppRootStateType) => {\r\n            const task = getState().tasks[todolistId].find(t => t.id === taskId);\r\n\r\n            if (!task) {\r\n                console.warn(\"No such task\");\r\n                return\r\n            }\r\n\r\n            const apiModel: UpdateTaskModelType = {\r\n                title: task.title,\r\n                deadline: task.deadline,\r\n                description: task.description,\r\n                priority: task.priority,\r\n                startDate: task.startDate,\r\n                status: task.status,\r\n                ...domainModel\r\n            }\r\n            dispatch(setAppStatusAC(\"loading\"));\r\n            dispatch(changeTaskEntityStatusAC(taskId, \"loading\", todolistId));\r\n            todolistsAPI.updateTask(todolistId, taskId, apiModel)\r\n                .then(res => {\r\n                    if (res.data.resultCode === 0) {\r\n                        dispatch(updateTaskAC(taskId, domainModel, todolistId));\r\n                        dispatch(setAppStatusAC(\"succeeded\"));\r\n                        dispatch(changeTaskEntityStatusAC(taskId, \"succeeded\", todolistId));\r\n                    } else {\r\n                        handleServerAppError(res.data, dispatch);\r\n                    }\r\n                })\r\n                .catch(err => {\r\n                    handleServerNetworkError(err, dispatch);\r\n                })\r\n                .finally(() => {\r\n                    dispatch(changeTaskEntityStatusAC(taskId, \"idle\", todolistId));\r\n                })\r\n        }\r\n","import { TextField } from '@material-ui/core';\r\nimport React, { ChangeEvent, useState } from 'react';\r\n\r\nexport type EditableSpanPropsType = {\r\n    value: string\r\n    onChange: (newValue: string) => void\r\n    disabled?: boolean\r\n}\r\n\r\nexport const EditableSpan = React.memo(function ({ disabled = false, ...props }: EditableSpanPropsType) {\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [title, setTitle] = useState(props.value);\r\n\r\n    const activateEditMode = () => {\r\n        if (disabled) return;\r\n        setEditMode(true);\r\n        setTitle(props.value);\r\n    }\r\n    const activateViewMode = () => {\r\n        setEditMode(false);\r\n        props.onChange(title);\r\n    }\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    return editMode\r\n        ? <TextField disabled={disabled} value={title} onChange={changeTitle} autoFocus onBlur={activateViewMode} />\r\n        : <span onDoubleClick={activateEditMode}>{props.value}</span>\r\n});\r\n","import { Checkbox, IconButton } from '@material-ui/core'\r\nimport { Delete } from '@material-ui/icons'\r\nimport React, { ChangeEvent, useCallback } from 'react'\r\nimport { TaskStatuses, TaskType } from '../../../../api/todolists-api'\r\nimport { EditableSpan } from '../../../../components/EditableSpan/EditableSpan'\r\n\r\nexport type TaskPropsType = {\r\n    task: TaskType\r\n    todolistId: string\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n}\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n    const onClickHandler = useCallback(() => props.removeTask(props.task.id, props.todolistId), [props.task.id, props.todolistId]);\r\n\r\n    const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        let newIsDoneValue = e.currentTarget.checked\r\n        props.changeTaskStatus(props.task.id, newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.New, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    const onTitleChangeHandler = useCallback((newValue: string) => {\r\n        props.changeTaskTitle(props.task.id, newValue, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    return <div key={props.task.id} className={props.task.status === TaskStatuses.Completed ? 'is-done' : ''}>\r\n        <Checkbox\r\n            disabled={props.task.entityStatus === \"loading\"}\r\n            checked={props.task.status === TaskStatuses.Completed}\r\n            color=\"primary\"\r\n            onChange={onChangeHandler}\r\n        />\r\n\r\n        <EditableSpan disabled={props.task.entityStatus === \"loading\"} value={props.task.title} onChange={onTitleChangeHandler} />\r\n        <IconButton disabled={props.task.entityStatus === \"loading\"} onClick={onClickHandler}>\r\n            <Delete />\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import { Button, IconButton } from '@material-ui/core'\r\nimport { Delete } from '@material-ui/icons'\r\nimport React, { useCallback, useEffect } from 'react'\r\nimport { useDispatch } from 'react-redux'\r\nimport { TaskStatuses, TaskType } from '../../../api/todolists-api'\r\nimport { AddItemForm } from '../../../components/AddItemForm/AddItemForm'\r\nimport { EditableSpan } from '../../../components/EditableSpan/EditableSpan'\r\nimport { getTasksTC } from '../tasks-reducer'\r\nimport { FilterValuesType, TodolistDomainType } from '../todolists-reducer'\r\nimport { Task } from './Task/Task'\r\n\r\ntype PropsType = {\r\n    todolist: TodolistDomainType\r\n    tasks: Array<TaskType>\r\n    changeFilter: (value: FilterValuesType, todolistId: string) => void\r\n    addTask: (title: string, todolistId: string) => void\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    removeTodolist: (id: string) => void\r\n    changeTodolistTitle: (id: string, newTitle: string) => void\r\n    demo?: boolean\r\n}\r\n\r\nexport const Todolist = React.memo(function ({ demo = false, ...props }: PropsType) {\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        if (demo) return\r\n        dispatch(getTasksTC(props.todolist.id))\r\n    }, [])\r\n\r\n    const addTask = useCallback((title: string) => {\r\n        props.addTask(title, props.todolist.id)\r\n    }, [props.addTask, props.todolist.id])\r\n\r\n    const removeTodolist = () => {\r\n        props.removeTodolist(props.todolist.id)\r\n    }\r\n    const changeTodolistTitle = useCallback((title: string) => {\r\n        props.changeTodolistTitle(props.todolist.id, title)\r\n    }, [props.todolist.id, props.changeTodolistTitle])\r\n\r\n    const onAllClickHandler = useCallback(() => props.changeFilter('all', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n    const onActiveClickHandler = useCallback(() => props.changeFilter('active', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n    const onCompletedClickHandler = useCallback(() => props.changeFilter('completed', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n\r\n\r\n    let tasksForTodolist = props.tasks;\r\n\r\n    if (props.todolist.filter === 'active') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.New)\r\n    }\r\n    if (props.todolist.filter === 'completed') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.Completed)\r\n    }\r\n\r\n    return <div>\r\n        <h3><EditableSpan disabled={props.todolist.entityStatus === \"loading\"} value={props.todolist.title} onChange={changeTodolistTitle} />\r\n            <IconButton onClick={removeTodolist} disabled={props.todolist.entityStatus === \"loading\"}>\r\n                <Delete />\r\n            </IconButton>\r\n        </h3>\r\n        <AddItemForm addItem={addTask} disabled={props.todolist.entityStatus === \"loading\"} />\r\n        <div>\r\n            {\r\n                tasksForTodolist.map(t => <Task key={t.id} task={t} todolistId={props.todolist.id}\r\n                    removeTask={props.removeTask}\r\n                    changeTaskTitle={props.changeTaskTitle}\r\n                    changeTaskStatus={props.changeTaskStatus}\r\n                />)\r\n            }\r\n        </div>\r\n        <div style={{ paddingTop: '10px' }}>\r\n            <Button variant={props.todolist.filter === 'all' ? 'outlined' : 'text'}\r\n                onClick={onAllClickHandler}\r\n                color={'default'}\r\n            >All\r\n            </Button>\r\n            <Button variant={props.todolist.filter === 'active' ? 'outlined' : 'text'}\r\n                onClick={onActiveClickHandler}\r\n                color={'primary'}>Active\r\n            </Button>\r\n            <Button variant={props.todolist.filter === 'completed' ? 'outlined' : 'text'}\r\n                onClick={onCompletedClickHandler}\r\n                color={'secondary'}>Completed\r\n            </Button>\r\n        </div>\r\n    </div>\r\n})\r\n\r\n\r\n","import { Grid, Paper } from '@material-ui/core';\r\nimport React, { useCallback, useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { TaskStatuses } from '../../api/todolists-api';\r\nimport { AppRootStateType } from '../../app/store';\r\nimport { AddItemForm } from '../../components/AddItemForm/AddItemForm';\r\nimport { addTaskTC, deleteTaskTC, TasksStateType, updateTaskTC } from './tasks-reducer';\r\nimport { Todolist } from './Todolist/Todolist';\r\nimport {\r\n    changeTodolistFilterAC,\r\n    changeTodolistTitleTC,\r\n    createTodolistTC,\r\n    deleteTodolistTC,\r\n    FilterValuesType,\r\n    getTodolistsTC,\r\n    TodolistDomainType\r\n} from './todolists-reducer';\r\n\r\ntype PropsType = {\r\n    demo?: boolean\r\n}\r\n\r\nexport const TodolistLists: React.FC<PropsType> = ({ demo = false }) => {\r\n\r\n    const todolists = useSelector<AppRootStateType, Array<TodolistDomainType>>(state => state.todolists);\r\n    const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks);\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        if (demo) return;\r\n        dispatch(getTodolistsTC());\r\n    }, []);\r\n\r\n    const removeTask = useCallback(function (id: string, todolistId: string) {\r\n        dispatch(deleteTaskTC(todolistId, id));\r\n    }, []);\r\n\r\n    const addTask = useCallback(function (title: string, todolistId: string) {\r\n        dispatch(addTaskTC(todolistId, title));\r\n    }, []);\r\n\r\n    const changeStatus = useCallback(function (id: string, status: TaskStatuses, todolistId: string) {\r\n        dispatch(updateTaskTC(todolistId, id, { status: status }));\r\n    }, []);\r\n\r\n    const changeTaskTitle = useCallback(function (id: string, newTitle: string, todolistId: string) {\r\n        dispatch(updateTaskTC(todolistId, id, { title: newTitle }));\r\n    }, []);\r\n\r\n    const changeFilter = useCallback(function (value: FilterValuesType, todolistId: string) {\r\n        const action = changeTodolistFilterAC(todolistId, value);\r\n        dispatch(action);\r\n    }, []);\r\n\r\n    const removeTodolist = useCallback(function (id: string) {\r\n        dispatch(deleteTodolistTC(id));\r\n    }, []);\r\n\r\n    const changeTodolistTitle = useCallback(function (id: string, title: string) {\r\n        dispatch(changeTodolistTitleTC(id, title));\r\n    }, []);\r\n\r\n    const addTodolist = useCallback((title: string) => {\r\n        dispatch(createTodolistTC(title));\r\n    }, [dispatch]);\r\n\r\n\r\n    return (\r\n        <>\r\n            <Grid container style={{ padding: \"20px\" }}>\r\n                <AddItemForm addItem={addTodolist} />\r\n            </Grid>\r\n            <Grid container spacing={3}>\r\n                {todolists.map(tl => {\r\n                    let allTodolistTasks = tasks[tl.id];\r\n\r\n                    return <Grid item key={tl.id}>\r\n                        <Paper style={{ padding: \"10px\" }}>\r\n                            <Todolist\r\n                                todolist={tl}\r\n                                tasks={allTodolistTasks}\r\n                                removeTask={removeTask}\r\n                                changeFilter={changeFilter}\r\n                                addTask={addTask}\r\n                                changeTaskStatus={changeStatus}\r\n                                removeTodolist={removeTodolist}\r\n                                changeTaskTitle={changeTaskTitle}\r\n                                changeTodolistTitle={changeTodolistTitle}\r\n                                demo={demo} />\r\n                        </Paper>\r\n                    </Grid>;\r\n                })}\r\n            </Grid>\r\n        </>\r\n    );\r\n};\r\n","import { AppBar, Button, Container, IconButton, LinearProgress, Toolbar, Typography } from '@material-ui/core';\r\nimport { Menu } from '@material-ui/icons';\r\nimport React from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { ErrorSnackbar } from '../components/ErrorSnackbar/ErrorSnackbar';\r\nimport { TodolistLists } from '../features/Todolists/TodolistLists';\r\nimport { RequestStatusType } from './app-reducer';\r\nimport './App.css';\r\nimport { AppRootStateType } from './store';\r\n\r\ntype PropsType = {\r\n    demo?: boolean\r\n}\r\n\r\nfunction App({ demo = false }: PropsType) {\r\n\r\n    const appStatus = useSelector<AppRootStateType, RequestStatusType>(state => state.app.status);\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <Menu />\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\">\r\n                        News\r\n                    </Typography>\r\n                    <Button color=\"inherit\">Login</Button>\r\n                </Toolbar>\r\n            </AppBar>\r\n            {appStatus === \"loading\" && <LinearProgress color=\"secondary\" />}\r\n            <Container fixed>\r\n                <TodolistLists demo={demo} />\r\n            </Container>\r\n            <ErrorSnackbar />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import { applyMiddleware, combineReducers, createStore } from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport { tasksReducer } from '../features/Todolists/tasks-reducer';\r\nimport { todolistsReducer } from '../features/Todolists/todolists-reducer';\r\nimport { appReducer } from './app-reducer';\r\n\r\n// объединяя reducer-ы с помощью combineReducers,\r\n// мы задаём структуру нашего единственного объекта-состояния\r\nconst rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todolists: todolistsReducer,\r\n    app: appReducer\r\n})\r\n// непосредственно создаём store\r\nexport const store = createStore(rootReducer, applyMiddleware(thunk));\r\n// определить автоматически тип всего объекта состояния\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n// а это, чтобы можно было в консоли браузера обращаться к store в любой момент\r\n// @ts-ignore\r\nwindow.store = store;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './app/App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport {Provider} from 'react-redux';\r\nimport {store} from './app/store';\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <Provider store={store}>\r\n            <App/>\r\n        </Provider>\r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}